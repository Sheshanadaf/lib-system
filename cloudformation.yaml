AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # S3 Bucket for Frontend Hosting
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: my-library-frontend-bucket-sheshan-hebron
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html

  # DynamoDB Table for Library Data
  LibraryDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LibraryTable1
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  # Security Group for EC2 Instances
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Launch Template for Auto Scaling Group
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: LibraryLaunchTemplate
      VersionDescription: Initial Version
      LaunchTemplateData:
        ImageId: ami-0c614dee691cbbf37  # Update AMI for your region
        InstanceType: t2.micro
        SecurityGroupIds:
          - !GetAtt EC2SecurityGroup.GroupId  # ✅ Correct way to reference Security Group ID
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: LibraryInstance


  

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      MinSize: '2'
      MaxSize: '5'
      DesiredCapacity: '2'
      VPCZoneIdentifier:
        - subnet-0761104f82f35a116 # Replace with your subnet ID
      TargetGroupARNs:
        - !Ref ALBTargetGroup
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber


  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LibraryALB
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: '60'
      SecurityGroups:
        - !GetAtt EC2SecurityGroup.GroupId 
      Subnets:
        - subnet-0e873e785de68682d # Replace with your subnet ID
        - subnet-0c6bc9756cd950755

  # Target Group for ALB
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      VpcId: vpc-03bb2a2ae6d53f14e # Replace with your actual VPC ID
      Protocol: HTTP
      Port: 80
      TargetType: instance

  # ALB Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Protocol: HTTP
      Port: 80
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup


  LibraryCodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodePipelineRole3
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CodePipelinePermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "s3:GetObject"
                  - "s3:PutObject"
                  - "s3:ListBucket"
                Resource:
                  - !Sub "arn:aws:s3:::${FrontendS3Bucket}"
                  - !Sub "arn:aws:s3:::${FrontendS3Bucket}/*"
              - Effect: Allow
                Action:
                  - "codestar-connections:UseConnection"
                  - "codestar-connections:GetConnection"
                Resource: "arn:aws:codeconnections:us-east-1:583966366465:connection/31abb4de-0ade-418a-baff-4c4a07cad0de"
              - Effect: Allow
                Action:
                  - "codebuild:StartBuild"
                Resource: !Sub "arn:aws:codebuild:us-east-1:583966366465:project/LibraryCodeBuild"

  LibraryCodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeBuildRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: 
                - codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource:
                  - !Sub arn:aws:s3:::${FrontendS3Bucket}/*
                  - !Sub arn:aws:s3:::${FrontendS3Bucket}
              - Effect: Allow
                Action:
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                Resource: "*"
              - Effect: Allow
                Action:
                  - codepipeline:PutJobSuccessResult
                  - codepipeline:PutJobFailureResult
                Resource: "*"
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:PutImage
                Resource: "*"
      
  LibraryCodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: CodeDeployRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codedeploy.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: CodeDeployPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ec2:DescribeInstances"
                  - "ec2:DescribeInstanceStatus"
                  - "tag:GetResources"
                  - "autoscaling:CompleteLifecycleAction"
                  - "autoscaling:DeleteLifecycleHook"
                  - "autoscaling:PutLifecycleHook"
                  - "autoscaling:RecordLifecycleActionHeartbeat"
                  - "autoscaling:DescribeAutoScalingGroups"
                  - "autoscaling:DescribeLifecycleHooks"
                  - "autoscaling:DescribeScalingActivities"
                  - "autoscaling:DescribeNotificationConfigurations"
                Resource: "*"


  # ✅ AWS CodePipeline (CI/CD)
  LibraryCodePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: LibraryPipeline
      RoleArn: !GetAtt LibraryCodePipelineRole.Arn  # Replace with actual ARN
      ArtifactStore:
        Type: S3
        Location: !Ref FrontendS3Bucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: CodeStarSourceConnection  # ✅ Use AWS CodeStar instead of OAuth
                Version: '1'
              Configuration:
                ConnectionArn: arn:aws:codeconnections:us-east-1:583966366465:connection/31abb4de-0ade-418a-baff-4c4a07cad0de  # Replace with actual CodeStar connection ARN
                FullRepositoryId: Sheshanadaf/CLoud_project_aws
                BranchName: main
              OutputArtifacts:
                - Name: SourceArtifact
              RunOrder: 1

        - Name: Build
          Actions:
            - Name: BuildFrontend
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref LibraryCodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              RunOrder: 2

        - Name: Deploy
          Actions:
            - Name: DeployToEC2
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref LibraryCodeDeploy
                DeploymentGroupName: !Ref LibraryDeploymentGroup
              InputArtifacts:
                - Name: BuildArtifact
              RunOrder: 3

  # ✅ AWS CodeBuild (CI/CD Build Stage)
  LibraryCodeBuild:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: LibraryCodeBuild
      ServiceRole: !GetAtt LibraryCodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: |  # ✅ Moved inside Source block
          version: 0.2
          phases:
            install:
              commands:
                - cd my-project/package.json  # Change to the correct folder containing package.json
                - npm install
            build:
              commands:
                - cd frontend  # Ensure you're in the correct folder before building
                - npm run build
          artifacts:
            files:
              - '**/*'
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        Type: LINUX_CONTAINER



  # ✅ AWS CodeDeploy Application
  LibraryCodeDeploy:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: LibraryApp

  # ✅ AWS CodeDeploy Deployment Group
  LibraryDeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    Properties:
      ApplicationName: !Ref LibraryCodeDeploy
      DeploymentGroupName: LibraryDeploymentGroup
      ServiceRoleArn: !GetAtt LibraryCodeDeployRole.Arn  # Replace with actual ARN
      DeploymentConfigName: CodeDeployDefault.AllAtOnce
      Ec2TagFilters:
        - Key: Name
          Value: LibraryEC2
          Type: KEY_AND_VALUE
      AutoScalingGroups:
        - !Ref AutoScalingGroup  # Attach Auto Scaling Group
      LoadBalancerInfo:
        TargetGroupInfoList:
          - Name: ALBTargetGroup  # Attach to ALB Target Group


  # AWS Lambda Function
  # LibraryLambdaFunction:
  #   Type: AWS::Lambda::Function
  #   DependsOn: FrontendS3Bucket  # Ensure S3 bucket is created first
  #   Properties:
  #     FunctionName: LibraryBackgroundTask
  #     Handler: index.handler
  #     Runtime: nodejs22.x
  #     Role: arn:aws:iam::583966366465:role/project-role # Replace with actual IAM role
  #     Code:
  #       S3Bucket: !Ref FrontendS3Bucket  # Use the S3 bucket reference
  #       S3Key: library-lambda.zip


Outputs:
  FrontendBucket:
    Description: S3 Bucket for React frontend
    Value: !Ref FrontendS3Bucket

  ALBDNSName:
    Description: Application Load Balancer DNS
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  DynamoDBTableName:
    Description: DynamoDB Table Name
    Value: !Ref LibraryDynamoDB